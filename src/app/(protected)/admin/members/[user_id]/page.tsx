"use client";
import { Metadata } from "next";
import React from "react";

import { ClassJoiningTable } from "@/components/member/class-joining-table";
import ProfileCardContent from "@/components/member/profile-card-content";
import { Badge } from "@/components/ui/badge";
import { BadgeCard } from "@/components/ui/badge-card";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import PageHeader from "@/components/ui/page-header";
import { Timeline } from "@/components/ui/timeline";
import { useGetUserById } from "@/hooks/users";

import { MyChart } from "./chart";
import { Skeleton } from "@/components/ui/skeleton";
import { Gender } from "@/types/gender.enum";

// export const metadata: Metadata = {
//   title: "Member Details | Admin | L2brary",
//   description: "View member details and information",
// };

interface MemberDetailPageProps {
  params: Promise<{
    user_id: string;
  }>;
}

export default function MemberDetailPage({ params }: MemberDetailPageProps) {
  const { user_id } = React.use(params);

  const { data, isLoading, error } = useGetUserById(user_id);

  if (isLoading) return <div>Vui l√≤ng ch·ªù gi√¢y l√°t...</div>;

  console.log("üöÄ ~ MemberDetailPage ~ data:", data!.data);
  const userInfo = data!.data;
  const classCerts = [
    "Chuy√™n ƒë·ªÅ V·∫≠t l√Ω hi·ªán ƒë·∫°i",
    "Th·ª±c h√†nh Quang h·ªçc",
    "H·ªôi th·∫£o V·∫≠t l√Ω l∆∞·ª£ng t·ª≠",
    "Workshop ƒêi·ªán t·ª´ h·ªçc",
    "Kh√≥a h·ªçc C∆° h·ªçc c·ªï ƒëi·ªÉn",
    "Th√≠ nghi·ªám V·∫≠t l√Ω h·∫°t nh√¢n",
    "Chuy√™n ƒë·ªÅ V·∫≠t l√Ω thi√™n vƒÉn",
  ];
  const experiences = [
    "Olympic V·∫≠t l√Ω",
    "Th·ª±c t·∫≠p lab",
    "CLB V·∫≠t l√Ω",
    "Tr·ª£ gi·∫£ng",
    "H·ªôi th·∫£o",
    "Nghi√™n c·ª©u",
    "T√¨nh nguy·ªán",
  ];
  const seminars = [
    "H·ªôi th·∫£o Khoa h·ªçc",
    "Seminar V·∫≠t l√Ω ·ª©ng d·ª•ng",
    "H·ªôi ngh·ªã Nghi√™n c·ª©u tr·∫ª",
    "Workshop STEM",
    "H·ªôi th·∫£o C√¥ng ngh·ªá m·ªõi",
    "Seminar ƒê·ªïi m·ªõi s√°ng t·∫°o",
    "H·ªôi th·∫£o Gi√°o d·ª•c",
  ];
  return (
    <>
      <PageHeader pageTitle={`H·ªì s∆°: ${userInfo.fullName}`} />
      <p className="text-muted-foreground mb-8">
        Xem v√† qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† tr·∫°ng th√°i c·ªßa {userInfo.fullName}
      </p>

      <div className="grid grid-cols-12 gap-4">
        <div className="col-span-4 space-y-4">
          <Card className="relative">
            <Badge className="absolute top-2.5 left-2.5 text-xs font-semibold">
              Qu·∫£n l√Ω
            </Badge>
            {/* {JSON.stringify(data)} */}
            <ProfileCardContent
              id={user_id}
              avatarUrl={"/image.png"}
              name={userInfo.fullName}
              phone={userInfo.phoneNumber}
              email={userInfo.email}
              // className={user.className}
              gender={userInfo.gender === Gender.MALE ? "Nam" : "N·ªØ"}
              birthday={(() => {
                const date = new Date(userInfo.birthdate);
                const day = String(date.getDate()).padStart(2, "0");
                const month = String(date.getMonth() + 1).padStart(2, "0");
                const year = date.getFullYear();
                return isNaN(date.getDate())
                  ? "---"
                  : `${day}/${month}/${year}`;
              })()}
            />
          </Card>
        </div>
        <div className="col-span-8 space-y-4">
          <BadgeCard
            title="Ch·ª©ng nh·∫≠n l·ªõp h·ªçc"
            items={userInfo.courseCertificates ?? []}
          />
          <BadgeCard title="Kinh nghi·ªám" items={userInfo.experiences ?? []} />
          <BadgeCard
            title="Tham gia S·ª± ki·ªán"
            items={userInfo.eventCertificates ?? []}
          />
          <Card>
            <CardContent>
              <h2 className="mb-4 text-2xl font-medium">Ho·∫°t ƒë·ªông G·∫ßn ƒë√¢y</h2>
              <Timeline className="mt-8">
                {/* {timelineData.map((item) => (
                  <TimelineItem key={item.id}>
                    <TimelineHeader>
                      <TimelineTime>{item.time}</TimelineTime>
                      <TimelineTitle>{item.title}</TimelineTitle>
                    </TimelineHeader>
                    {item.description && (
                      <TimelineDescription>
                        {item.description}
                      </TimelineDescription>
                    )}
                  </TimelineItem>
                ))} */}
              </Timeline>
            </CardContent>
          </Card>
        </div>
      </div>
      <div className="mb-4" />
    </>
  );
}
