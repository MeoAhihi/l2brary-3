"use client";

import { useMemo } from "react";

import { FormFieldConfig } from "@/components/common/form/types";
import {
  MONTHLY_RECURRENT_OPTIONS,
  RECURRENT_OPTIONS,
  WEEKLY_RECURRENT_OPTIONS,
} from "@/constants/course";
import { LabelValue } from "@/types/common";
import { ScheduleTypeEnum } from "@/types/courses/type";

export function useCourseFormFields(
  scheduleType: string,
  courseGroupOptions: LabelValue[],
) {
  console.info("üöÄ ~ useCourseFormFields ~ scheduleType:", scheduleType);
  const fields = useMemo((): FormFieldConfig[] => {
    const baseFields: FormFieldConfig[] = [
      {
        name: "title",
        label: "Ti√™u ƒë·ªÅ",
        type: "text",
        placeholder: "V·∫≠t l√Ω Thi√™n vƒÉn",
        description: "Ti√™u ƒë·ªÅ c·ªßa l·ªõp h·ªçc m·ªõi",
        required: true,
      },
      {
        name: "description",
        label: "M√¥ t·∫£",
        type: "textarea",
        placeholder: "M√¥ t·∫£ l·ªõp h·ªçc",
        description: "Th√¥ng tin m√¥ t·∫£ l·ªõp h·ªçc d√†nh cho c√°c b·∫°n h·ªçc sinh.",
      },
      {
        name: "difficulty",
        label: "ƒê·ªô kh√≥",
        type: "text",
        placeholder: "Nh·∫≠p ƒë·ªô kh√≥",
        description: "M·ª©c ƒë·ªô kh√≥ c·ªßa l·ªõp h·ªçc (d·ªÖ, trung b√¨nh, kh√≥).",
      },
      {
        name: "maxStudents",
        label: "S·ªë h·ªçc vi√™n t·ªëi ƒëa",
        type: "number",
        placeholder: "Nh·∫≠p s·ªë h·ªçc vi√™n t·ªëi ƒëa",
        description: "S·ªë l∆∞·ª£ng h·ªçc vi√™n t·ªëi ƒëa c√≥ th·ªÉ tham gia l·ªõp h·ªçc.",
      },
      {
        name: "group",
        label: "Kh·ªëi l·ªõp",
        type: "select",
        placeholder: "Ch·ªçn kh·ªëi l·ªõp",
        options: courseGroupOptions,
        description: "Ph√¢n lo·∫°i c·ªßa l·ªõp h·ªçc m·ªõi.",
        required: true,
      },
      {
        name: "scheduleType",
        label: "Lo·∫°i l·ªõp",
        type: "radio",
        options: RECURRENT_OPTIONS,
        description: "L·ªõp h·ªçc m·ªôt l·∫ßn/l·∫∑p l·∫°i",
        required: true,
      },
    ];

    const dynamicFields: FormFieldConfig[] = [];

    if (
      [ScheduleTypeEnum.Weekly, ScheduleTypeEnum.BiWeekly].includes(
        scheduleType as ScheduleTypeEnum,
      )
    ) {
      dynamicFields.push({
        name: "recurrentRule",
        label: "L·ªãch h·ªçc",
        type: "multiselect",
        placeholder: "Ng√†y h·ªçc",
        options: WEEKLY_RECURRENT_OPTIONS,
        required: true,
      });
    } else if (scheduleType === ScheduleTypeEnum.LunarMonthly) {
      dynamicFields.push({
        name: "recurrentRule",
        label: "L·ªãch h·ªçc",
        type: "text",
        placeholder: "Ng√†y h·ªçc (√¢m l·ªãch)",
        required: true,
      });
    } else if (scheduleType === ScheduleTypeEnum.Monthly) {
      dynamicFields.push({
        name: "recurrentRule",
        label: "L·ªãch h·ªçc",
        type: "multiselect",
        placeholder: "Ch·ªçn ng√†y trong th√°ng",
        options: MONTHLY_RECURRENT_OPTIONS,
        required: true,
      });
    } else if (scheduleType === ScheduleTypeEnum.OneTime) {
      dynamicFields.push({
        name: "recurrentRule",
        label: "Ng√†y di·ªÖn ra",
        type: "multidate",
        placeholder: "Ch·ªçn ng√†y",
        required: true,
      });
    }

    const finalFields: FormFieldConfig[] = [
      {
        name: "enrollmentDeadlineDate",
        label: "H·∫°n ch√≥t ƒëƒÉng k√Ω",
        type: "date",
        placeholder: "Ch·ªçn ng√†y",
        description: "H·∫°n ch√≥t ƒë·ªÉ h·ªçc vi√™n ƒëƒÉng k√Ω tham gia l·ªõp h·ªçc.",
      },
      {
        type: "group",
        layout: "grid",
        gridCols: 2,
        className: "grid-cols-1 lg:grid-cols-2 gap-4",
        fields: [
          {
            name: "startDate",
            label: "Ng√†y b·∫Øt ƒë·∫ßu",
            type: "date",
            placeholder: "Ch·ªçn ng√†y",
            description: "Ng√†y b·∫Øt ƒë·∫ßu c·ªßa l·ªõp h·ªçc.",
          },
          {
            name: "endDate",
            label: "Ng√†y k·∫øt th√∫c",
            type: "date",
            placeholder: "Ch·ªçn ng√†y",
            description: "Ng√†y k·∫øt th√∫c c·ªßa l·ªõp h·ªçc.",
          },
        ],
      },
      {
        name: "chatGroupUrl",
        label: "ƒê∆∞·ªùng d·∫´n nh√≥m chat",
        type: "text",
        placeholder: "https://zalo.me/g/abcxyz",
        description: "ƒê∆∞·ªùng d·∫´n ƒë·∫øn nh√≥m chat (Zalo, Messenger,...).",
      },
      {
        type: "group",
        layout: "horizontal",
        className: "items-start",
        description: "C√†i ƒë·∫∑t quy·ªÅn truy c·∫≠p v√† hi·ªÉn th·ªã",
        fields: [
          {
            name: "isPublic",
            label: "C√¥ng khai",
            type: "checkbox",
            description: "Cho ph√©p c√¥ng khai l·ªõp h·ªçc n√†y.",
          },
          {
            name: "isRequireApproval",
            label: "Ph√™ duy·ªát h·ªçc",
            type: "checkbox",
            description: "Y√™u c·∫ßu ph√™ duy·ªát tr∆∞·ªõc khi tham gia l·ªõp h·ªçc n√†y.",
          },
          {
            name: "isAllowGuestAccess",
            label: "Kh√°ch m·ªùi",
            type: "checkbox",
            description: "Cho ph√©p kh√°ch m·ªùi th·∫•y n·ªôi dung l·ªõp h·ªçc n√†y.",
          },
        ],
      },
    ];

    return [...baseFields, ...dynamicFields, ...finalFields];
  }, [scheduleType, courseGroupOptions]);

  return fields;
}
